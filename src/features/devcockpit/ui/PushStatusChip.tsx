// @features/devcockpit/ui/PushStatusChip.tsx

import React, { useEffect, useState } from "react";
import { CommitTrackingAgent } from "@features/devcockpit/utils/CommitTrackingAgent";
import "./PushStatusChip.css";

const PushStatusChip: React.FC = () => {
  const [status, setStatus] = useState<"nie" | "ge√§ndert" | "synchron">("nie");
  const [zeitpunkt, setZeitpunkt] = useState<string | null>(null);

  // üß† Extrahierte Statuslogik in eigene Funktion f√ºr Wiederverwendbarkeit
  const checkStatus = () => {
    const lastPush = CommitTrackingAgent.getPushZeitpunkt();
    if (!lastPush) {
      setStatus("nie");
      setZeitpunkt(null);
      return;
    }

    const ge√§ndert = CommitTrackingAgent.wurdeSeitherGe√§ndert();
    setStatus(ge√§ndert ? "ge√§ndert" : "synchron");
    setZeitpunkt(new Date(lastPush).toLocaleString());
  };

  // üì¶ Initial und regelm√§√üig pr√ºfen
  useEffect(() => {
    checkStatus(); // initial pr√ºfen

    const interval = setInterval(() => {
      checkStatus();
    }, 30000); // alle 30 Sekunden

    return () => clearInterval(interval); // beim Unmount aufr√§umen
  }, []);

  // üé® Chip-Darstellung basierend auf Status
  const getChipProps = () => {
    switch (status) {
      case "nie":
        return {
          text: "Nie gepusht",
          className: "chip-red",
          tooltip: "Es wurde noch nie ein Push best√§tigt.",
        };
      case "ge√§ndert":
        return {
          text: "√Ñnderungen",
          className: "chip-orange",
          tooltip: `Letzter Push: ${zeitpunkt}\n√Ñnderungen seitdem erkannt.`,
        };
      case "synchron":
        return {
          text: "Synchron",
          className: "chip-green",
          tooltip: `Keine √Ñnderungen seit dem letzten Push am ${zeitpunkt}`,
        };
    }
  };

  const { text, className, tooltip } = getChipProps();

  return (
    <span className={`push-status-chip ${className}`} title={tooltip}>
      {text}
    </span>
  );
};

export default PushStatusChip;
